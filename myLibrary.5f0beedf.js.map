{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,0BAIA,MAGMC,EAAaC,SAASC,cAAc,mBACpCC,EAAWF,SAASC,cAAc,iBAKxCE,eAAeC,IACbP,EAAAQ,KAAKC,QAAQC,UAAUC,OAAO,mBAE9BT,EAAWQ,UAAUE,IAAI,uBACzBP,EAASK,UAAUC,OAAO,uBAE1B,IACE,MAAME,EAAeC,KAAKC,MAAMC,aAAaC,QAhB7B,gBAmBhBC,QAFqBC,QAAQC,IAAIP,EAAaQ,IAAIC,KAIlDtB,EAAAQ,KAAKC,QAAQC,UAAUE,IAAI,kB,CAC3B,MAAOW,GAGP,OAFAC,EAAAC,GAASC,OAAOC,QAAQ,uCACxB3B,EAAAQ,KAAKC,QAAQC,UAAUE,IAAI,kB,EAyB/B,SAASM,EAAkBU,GACzB5B,EAAAQ,KAAKqB,cAAcC,UAAY,GAE/BF,EACGP,KAAI,EAACU,YAAEA,EAAWC,OAAEA,EAAMC,MAAEA,EAAKC,eAAEA,EAAcC,aAAEA,EAAYC,eAAEA,EAAcC,GAAEA,KAIzE,qCAAqCA,GAAM,uHAHnCN,EACX,kCAAkCA,IAClC,0EAIFE,GAASC,GAAkB,iCACNG,iFAEuBA,mDACNA,KAAMJ,GAASC,GAAkB,iEAC/BG,0DACKA,KA8BrD,SAAmBL,GACjB,MAAMM,EAAM,GAEZ,IAAK,IAAIC,EAAQ,EAAGA,EAAQP,EAAOQ,OAAQD,IAAS,CAClD,MAAME,EAAOC,OAAOC,OAAOX,EAAOO,IAClCD,EAAIM,KAAKH,EAAK,G,CAGhB,MAAMI,EAAY,GAElB,GAAIP,EAAIE,OAAS,EAIf,OAHAK,EAAUD,KAAKN,EAAI,IACnBO,EAAUD,KAAKN,EAAI,IACnBO,EAAUD,KAAK,SACRC,EAAUC,KAAK,MAGxB,OAAOR,EAAIQ,KAAK,K,CA9CVC,CAAUf,IAAW,kGAGqBK,gEACCA,KAC3C,IAAIW,KAAKb,GAAcc,eAAiB,IAAID,KAAKZ,GAAgBa,eAAiB,0FAMrFC,SAAQC,GAAKnD,EAAAQ,KAAKqB,cAAcuB,mBAAmB,YAAaD,I,CAxErEjD,EAAWmD,iBAAiB,QAAS9C,GACrCF,EAASgD,iBAAiB,SAsB1B/C,iBACEN,EAAAQ,KAAKC,QAAQC,UAAUC,OAAO,mBAE9BN,EAASK,UAAUE,IAAI,uBACvBV,EAAWQ,UAAUC,OAAO,uBAE5B,IACE,MAAME,EAAeC,KAAKC,MAAMC,aAAaC,QAnC/B,cAsCdC,QAFqBC,QAAQC,IAAIP,EAAaQ,IAAIC,KAGlDtB,EAAAQ,KAAKC,QAAQC,UAAUE,IAAI,kB,CAC3B,MAAOW,GAIP,OAHAC,EAAAC,GAASC,OAAOC,QAAQ,qCACxB3B,EAAAQ,KAAKC,QAAQC,UAAUE,IAAI,kB,KAyC/BN,eAAegB,EAAegC,GAC5B,MAAMC,EAAU,UAAUD,6CAC1B,IAIE,aAHuBE,EAAAC,QAAMC,IAAI,+BAAaH,MAG9BI,I,CAChB,MAAOpC,GACPqC,QAAQC,IAAItC,E,EAwBhBhB,G","sources":["src/js/MyLib.js"],"sourcesContent":["import { refs } from './refs';\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\n\nconst WATCHED_KEY = 'Watched_KEY';\nconst QUEUE_KEY = 'Queue_KEY';\n\nconst btnWatched = document.querySelector('.js-btn-watched');\nconst btnQueue = document.querySelector('.js-btn-queue');\n\nbtnWatched.addEventListener('click', goToWatched);\nbtnQueue.addEventListener('click', goToQueue);\n\nasync function goToWatched() {\n  refs.spinner.classList.remove('visually-hidden');\n\n  btnWatched.classList.add('filter__btn--active');\n  btnQueue.classList.remove('filter__btn--active');\n\n  try {\n    const idFilmsArray = JSON.parse(localStorage.getItem(WATCHED_KEY));\n    const qweqwe = await Promise.all(idFilmsArray.map(fetchMovieById));\n\n    renderFilmsMarkup(qweqwe);\n\n    refs.spinner.classList.add('visually-hidden');\n  } catch (error) {\n    Notiflix.Notify.failure('Your Watched gallery is empty!');\n    refs.spinner.classList.add('visually-hidden');\n    return;\n  }\n}\n\nasync function goToQueue() {\n  refs.spinner.classList.remove('visually-hidden');\n\n  btnQueue.classList.add('filter__btn--active');\n  btnWatched.classList.remove('filter__btn--active');\n\n  try {\n    const idFilmsArray = JSON.parse(localStorage.getItem(QUEUE_KEY));\n    const qweqwe = await Promise.all(idFilmsArray.map(fetchMovieById));\n\n    renderFilmsMarkup(qweqwe);\n    refs.spinner.classList.add('visually-hidden');\n  } catch (error) {\n    Notiflix.Notify.failure('Your Queue gallery is empty!');\n    refs.spinner.classList.add('visually-hidden');\n\n    return;\n  }\n}\n\nfunction renderFilmsMarkup(films) {\n  refs.libgallerySet.innerHTML = '';\n\n  films\n    .map(({ poster_path, genres, title, original_title, release_date, first_air_date, id }) => {\n      const poster = poster_path\n        ? `https://image.tmdb.org/t/p/w400${poster_path}`\n        : `https://image.tmdb.org/t/p/w400/uc4RAVW1T3T29h6OQdr7zu4Blui.jpg`;\n      return `<li class=\"gallery__item\" data-id=${id || `No ID`}>\n                <div class=\"films__img\">\n                    <img src=https://image.tmdb.org/t/p/original${poster} alt=\"${\n        title || original_title || 'No title'\n      }\" loading=\"lazy\" id=${id}>\n                </div>\n                <div class=\"film__description\" id=${id}>\n                  <p class=\"film__title\" id=${id}>${title || original_title || 'No title'}</p>\n                  <div class=\"films__meta\" id=${id}>\n                    <span class=\"films__genres\" id=${id}>${\n        getGenres(genres) || 'No genres info'\n      }</span>\n                    \n                    <span class=\"films__sep\" id=${id}>|</span>\n                    <span class=\"films__data\" id=${id}>${\n        new Date(release_date).getFullYear() || new Date(first_air_date).getFullYear() || 'No info'\n      }</span>\n                  </div>\n                </div>\n            </li>`;\n    })\n    .forEach(c => refs.libgallerySet.insertAdjacentHTML('beforeend', c));\n}\n\nconst API_KEY = 'c3923fa38d2dd62131b577696cc2f23f';\nconst mainUrl = 'https://api.themoviedb.org/3';\n\nasync function fetchMovieById(filmId) {\n  const filters = `/movie/${filmId}?api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(`${mainUrl}${filters}`);\n\n    // console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction getGenres(genres) {\n  const arr = [];\n\n  for (let index = 0; index < genres.length; index++) {\n    const name = Object.values(genres[index]);\n    arr.push(name[1]);\n  }\n\n  const ArrToJoin = [];\n\n  if (arr.length > 3) {\n    ArrToJoin.push(arr[0]);\n    ArrToJoin.push(arr[1]);\n    ArrToJoin.push('Other');\n    return ArrToJoin.join(', ');\n  }\n\n  return arr.join(', ');\n}\n\ngoToWatched();\n"],"names":["$4Nugj","parcelRequire","$c08bbb6f65cb69b0$var$btnWatched","document","querySelector","$c08bbb6f65cb69b0$var$btnQueue","async","$c08bbb6f65cb69b0$var$goToWatched","refs","spinner","classList","remove","add","idFilmsArray","JSON","parse","localStorage","getItem","$c08bbb6f65cb69b0$var$renderFilmsMarkup","Promise","all","map","$c08bbb6f65cb69b0$var$fetchMovieById","error","$parcel$interopDefault","$iU1Pc","Notify","failure","films","libgallerySet","innerHTML","poster_path","genres","title","original_title","release_date","first_air_date","id","arr","index","length","name","Object","values","push","ArrToJoin","join","$c08bbb6f65cb69b0$var$getGenres","Date","getFullYear","forEach","c","insertAdjacentHTML","addEventListener","filmId","filters","$dIxxU","default","get","data","console","log"],"version":3,"file":"myLibrary.5f0beedf.js.map"}