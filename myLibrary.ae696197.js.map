{"mappings":"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","sources":["src/js/MyLib.js"],"sourcesContent":["import { refs } from './refs';\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\n\nconst WATCHED_KEY = 'Watched_KEY';\nconst QUEUE_KEY = 'Queue_KEY';\n\nconst btnWatched = document.querySelector('.js-btn-watched');\nconst btnQueue = document.querySelector('.js-btn-queue');\n\nbtnWatched.addEventListener('click', goToWatched);\nbtnQueue.addEventListener('click', goToQueue);\n\nasync function goToWatched() {\n  refs.spinner.classList.remove('visually-hidden');\n\n  btnWatched.classList.add('filter__btn--active');\n  btnQueue.classList.remove('filter__btn--active');\n\n  try {\n    const idFilmsArray = JSON.parse(localStorage.getItem(WATCHED_KEY));\n    const qweqwe = await Promise.all(idFilmsArray.map(fetchMovieById));\n\n    renderFilmsMarkup(qweqwe);\n\n    refs.spinner.classList.add('visually-hidden');\n  } catch (error) {\n    Notiflix.Notify.failure('Your Watched gallery is empty!');\n    refs.spinner.classList.add('visually-hidden');\n    return;\n  }\n}\n\nasync function goToQueue() {\n  refs.spinner.classList.remove('visually-hidden');\n\n  btnQueue.classList.add('filter__btn--active');\n  btnWatched.classList.remove('filter__btn--active');\n\n  try {\n    const idFilmsArray = JSON.parse(localStorage.getItem(QUEUE_KEY));\n    const qweqwe = await Promise.all(idFilmsArray.map(fetchMovieById));\n\n    renderFilmsMarkup(qweqwe);\n    refs.spinner.classList.add('visually-hidden');\n  } catch (error) {\n    Notiflix.Notify.failure('Your Queue gallery is empty!');\n    refs.spinner.classList.add('visually-hidden');\n\n    return;\n  }\n}\n\nfunction renderFilmsMarkup(films) {\n  refs.libgallerySet.innerHTML = '';\n\n  films\n    .map(({ poster_path, genres, title, original_title, release_date, first_air_date, id }) => {\n      const poster = poster_path\n        ? `https://image.tmdb.org/t/p/w400${poster_path}`\n        : `https://image.tmdb.org/t/p/w400/uc4RAVW1T3T29h6OQdr7zu4Blui.jpg`;\n      return `<li class=\"gallery__item\" data-id=${id || `No ID`}>\n                <div class=\"films__img\">\n                    <img src=https://image.tmdb.org/t/p/original${poster} alt=\"${\n        title || original_title || 'No title'\n      }\" loading=\"lazy\" id=${id}>\n                </div>\n                <div class=\"film__description\" id=${id}>\n                  <p class=\"film__title\" id=${id}>${title || original_title || 'No title'}</p>\n                  <div class=\"films__meta\" id=${id}>\n                    <span class=\"films__genres\" id=${id}>${\n        getGenres(genres) || 'No genres info'\n      }</span>\n                    \n                    <span class=\"films__sep\" id=${id}>|</span>\n                    <span class=\"films__data\" id=${id}>${\n        new Date(release_date).getFullYear() || new Date(first_air_date).getFullYear() || 'No info'\n      }</span>\n                  </div>\n                </div>\n            </li>`;\n    })\n    .forEach(c => refs.libgallerySet.insertAdjacentHTML('beforeend', c));\n}\n\nconst API_KEY = 'c3923fa38d2dd62131b577696cc2f23f';\nconst mainUrl = 'https://api.themoviedb.org/3';\n\nasync function fetchMovieById(filmId) {\n  const filters = `/movie/${filmId}?api_key=${API_KEY}`;\n  try {\n    const response = await axios.get(`${mainUrl}${filters}`);\n\n    // console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction getGenres(genres) {\n  const arr = [];\n\n  for (let index = 0; index < genres.length; index++) {\n    const name = Object.values(genres[index]);\n    arr.push(name[1]);\n  }\n\n  const ArrToJoin = [];\n\n  if (arr.length > 3) {\n    ArrToJoin.push(arr[0]);\n    ArrToJoin.push(arr[1]);\n    ArrToJoin.push('Other');\n    return ArrToJoin.join(', ');\n  }\n\n  return arr.join(', ');\n}\n\ngoToWatched();\n"],"names":["$bpxeT","parcelRequire","$c08bbb6f65cb69b0$var$WATCHED_KEY","$c08bbb6f65cb69b0$var$QUEUE_KEY","$c08bbb6f65cb69b0$var$btnWatched","document","querySelector","$c08bbb6f65cb69b0$var$btnQueue","$c08bbb6f65cb69b0$var$goToWatched","$c08bbb6f65cb69b0$var$_goToWatched","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","idFilmsArray","$4Nugj","refs","spinner","classList","remove","add","JSON","parse","localStorage","getItem","Promise","all","map","$c08bbb6f65cb69b0$var$fetchMovieById","$c08bbb6f65cb69b0$var$renderFilmsMarkup","_ctx","sent","$iU1Pc","Notify","failure","$c08bbb6f65cb69b0$var$_goToQueue","films","libgallerySet","innerHTML","param","poster_path","genres","title","original_title","release_date","first_air_date","id","poster","concat","arr","index","length","name","Object","values","push","ArrToJoin","join","$c08bbb6f65cb69b0$var$getGenres","Date","getFullYear","forEach","c","insertAdjacentHTML","addEventListener","$c08bbb6f65cb69b0$var$API_KEY","$c08bbb6f65cb69b0$var$mainUrl","filmId","$c08bbb6f65cb69b0$var$_fetchMovieById","filters","response","$dIxxU","default","get","data","console","log","t0"],"version":3,"file":"myLibrary.ae696197.js.map"}